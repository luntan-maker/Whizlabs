# https://www.whizlabs.com/aws-solutions-architect-associate/
# https://play.whizlabs.com/site/task_details?lab_type=1&task_id=271&quest_id=35
Parameters:
  ParamBucketName:
    Type: String
    Description: AddOn to prevent circular dependency
Resources:
  MyBucket:
    DependsOn: S3Permission
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub
        - ${Name}
        - { Name: !Ref ParamBucketName}
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .txt
            Function: !GetAtt producer.Arn

  S3Permission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: producer
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub
        - arn:aws:s3:::${Name}
        - {Name: !Ref ParamBucketName}

  producer:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      FunctionName: producer
      Runtime: nodejs14.x
      Role: !GetAtt MyRole.Arn
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          AWS.config.update({
              region: 'us-east-1'
          })
          const s3 = new AWS.S3();
          const kinesis = new AWS.Kinesis();
          exports.handler = async (event) => {
              console.log(JSON.stringify(event));
              const bucketName = event.Records[0].s3.bucket.name;
              const keyName = event.Records[0].s3.object.key;
              const params = {
                  Bucket: bucketName,
                  Key: keyName
              }
              await s3.getObject(params).promise().then(async (data) => {
                  const dataString = data.Body.toString();
                  const payload = {
                      data: dataString
                  }
                  await sendToKinesis(payload, keyName);
              }, error => {
                  console.error(error);
              })
          };
          async function sendToKinesis(payload, partitionKey) {
              const params = {
                  Data: JSON.stringify(payload),
                  PartitionKey: partitionKey,
                  StreamName: 'whiz-data-stream'
              }
              await kinesis.putRecord(params).promise().then(response => {
                  console.log(response);
              }, error => {
                  console.error(error);
              })
          }


  MyStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: whiz-data-stream
      ShardCount: 1
      StreamEncryption:
        EncryptionType: KMS
        KeyId: alias/aws/kinesis

  Cons1:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      FunctionName: consumer1
      Runtime: nodejs14.x
      Role: !GetAtt MyRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
          console.log(JSON.stringify(event));
          for (const record of event.Records) {
              const data = JSON.parse(Buffer.from(record.kinesis.data, 'base64'));
              console.log('consumer #1', data);
          }
          };
  TriggerCons1:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      StartingPosition: LATEST
      FunctionName: !Ref Cons1
      EventSourceArn: !GetAtt MyStream.Arn

  Cons2:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      FunctionName: consumer2
      Runtime: nodejs14.x
      Role: !GetAtt MyRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
          console.log(JSON.stringify(event));
          for (const record of event.Records) {
              const data = JSON.parse(Buffer.from(record.kinesis.data, 'base64'));
              console.log('consumer #2', data);
          }
          };

  TriggerCons2:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      StartingPosition: LATEST
      FunctionName: !Ref Cons2
      EventSourceArn: !GetAtt MyStream.Arn

  MyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AmazonKinesisFullAccess